@page "/"

@using AppliedPi
@using AppliedPi.Translate
@using StatefulHorn
@using SarsaWidgets
@using Sarsaparilla.Utils;

@inject IJSRuntime JS

<PageTitle>Applied π Interface</PageTitle>

<PaneStack>
    <Pane Title='Editor'>
        <ButtonBarItems>
            <button @onclick=Parse>Parse</button>
        </ButtonBarItems>
        <Body>
            <div class='editor-pane-contents'>
                <div class='pane-button-bar'>
                    <button class='load-source-file'>
                        <InputFile OnChange=@LoadSourceFile/>
                        <div class='load-source-file-inner'>📂 Load Source File</div>
                    </button>
                    <div class='grower'></div>
                    <SampleSelector Library="@SampleLibrary" OnModelSelected="@OverwriteWithSample"/>
                    <div class='grower'></div>
                    <button @onclick=SaveSource>💾 Save Source</button>
                </div>
                <AppliedPiEditor @bind-Text=AppliedPiSource />
                @if (ErrorMessage != null)
                {
                    <div class='compile-error-message'>
                        @ErrorMessage
                    </div>
                }
            </div>
        </Body>
    </Pane>

    <Pane Title='Parsed π Model'>
        <ButtonBarItems>
            <button @onclick=Query disabled=@QueryDisabled>Query</button>
        </ButtonBarItems>
        <Body>
            <div class='parse-pane-contents'>
                <div class='parsed-network-block'>
                    <h4>Unresolved Network</h4>
                    <NetworkDisplay Network=@ParsedNetwork/>
                </div>
                <div class='resolved-network-block'>
                    <h4>Resolved Network</h4>
                    <ResolvedNetworkDisplay ResolvedNetwork=@FullyResolvedNetwork/>
                </div>
                @if (Translation != null)
                {
                    <div class='rules-block'>
                        <h4>Rules Generated</h4>
                        <h5>Queries</h5>
                        <div class='query-block'>
                            @foreach (IMessage q in Translation.Queries)
                            {
                                <div class='query-message'>@q</div>
                            }
                        </div>
                        <h5>Initial States</h5>
                        <div class='initial-state-block'>
                            @foreach (State s in Translation.InitialStates)
                            {
                                <div class='initial-state'>@s</div>
                            }
                        </div>
                        @foreach (Rule r in Translation.Rules)
                        {
                            <RuleDisplay Rule=@r/>
                        }
                    </div>
                }
            </div>
        </Body>
    </Pane>

    <Pane Title='Query Result'>
        <Body>
            @if (Engine != null)
            {
                <QueryEngineDisplay @ref=QEDisplay Engine=@Engine/>
            }
            else
            {
                <p class='no-engine-message'>Query the model to continue.</p>
            }
        </Body>
    </Pane>
</PaneStack>

@code {
    public string AppliedPiSource { get; set; } = "";

    public string? ErrorMessage { get; set; }

    public Network? ParsedNetwork { get; set; }

    public ResolvedNetwork? FullyResolvedNetwork { get; set; }

    public Translation? Translation { get; set; }


    #region Input/Output handling.

    private StaticSampleLibrary SampleLibrary = new(typeof(ModelSampleLibrary));

    private void OverwriteWithSample(string model)
    {
        AppliedPiSource = model;
        ParsedNetwork = null;
        FullyResolvedNetwork = null;
        StateHasChanged();
    }

    private async void LoadSourceFile(InputFileChangeEventArgs args)
    {
        try
        {
            using StreamReader reader = new(args.File.OpenReadStream());
            AppliedPiSource = await reader.ReadToEndAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            AppliedPiSource = $"// UNABLE TO LOAD SOURCE: {ex}";
        }
    }

    private static readonly string DefaultSourceFilename = "source.txt";

    public async void SaveSource()
    {
        await UserFileHandling.SaveStringToFile(JS, DefaultSourceFilename, AppliedPiSource);
    }

    #endregion

    private void Parse()
    {
        try
        {
            ErrorMessage = null;
            ParsedNetwork = null;
            FullyResolvedNetwork = null;
            Translation = null;
            Engine = null;

            ParsedNetwork = Network.CreateFromCode(AppliedPiSource);
            if (ParsedNetwork.MainProcess == null)
            {
                ErrorMessage = "No main process specified, network cannot be resolved or rules generated.";
            }
            else
            {
                FullyResolvedNetwork = ResolvedNetwork.From(ParsedNetwork);
                Translation = Translation.From(FullyResolvedNetwork, ParsedNetwork);

                List<QueryEngine> engines = new(Translation.QueryEngines());
                if (engines.Count > 0)
                {
                    Engine = engines[0];
                }
                else
                {
                    ErrorMessage = "No query specified.";
                }
            }
        }
        catch (NetworkCreationException ex)
        {
            ErrorMessage = ex.Message;
        }
        catch (ArgumentException aEx)
        {
            ErrorMessage = aEx.Message;
        }
    }

    private QueryEngine? Engine = null;

    private QueryEngineDisplay? _QEDisplay;

    private QueryEngineDisplay? QEDisplay {
        get => _QEDisplay;
        set
        {
            if (_QEDisplay != null)
            {
                _QEDisplay.OnQueryCompleted -= QueryFinished;
            }
            if (value != null)
            {
                _QEDisplay = value;
                _QEDisplay.OnQueryCompleted += QueryFinished;
            }
        }
    }

    public bool QueryDisabled => Engine == null;

    public bool QueryRunning { get; set; }

    private void Query()
    {
        if (!QueryRunning)
        {
            QEDisplay!.ExecuteQuery();
            QueryRunning = true;
        }
        else
        {
            QEDisplay!.CancelQuery();
            QueryRunning = false;
        }
    }

    private void QueryFinished() => QueryRunning = false;
}
