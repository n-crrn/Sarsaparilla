@page "/pi"

@using AppliedPi
@using StatefulHorn
@using SarsaWidgets

<PageTitle>Applied π Interface</PageTitle>

<PaneStack>
    <Pane Title='Editor'>
        <ButtonBarItems>
            <button @onclick=Parse>Parse</button>
        </ButtonBarItems>
        <Body>
            <div class='editor-pane-contents'>
                <AppliedPiEditor @bind-Text=AppliedPiSource />
                @if (ErrorMessage != null)
                {
                    <div class='compile-error-message'>
                        @ErrorMessage
                    </div>
                }
            </div>
        </Body>
    </Pane>

    <Pane Title='Parsed π Model'>
        <ButtonBarItems>
            <button @onclick=Query>Query</button>
        </ButtonBarItems>
        <Body>
            <div class='parse-pane-contents'>
                <div class='parsed-network-block'>
                    <h4>Unresolved Network</h4>
                    <NetworkDisplay Network=@ParsedNetwork/>
                </div>
                <div class='resolved-network-block'>
                    <h4>Resolved Network</h4>
                    <ResolvedNetworkDisplay ResolvedNetwork=@FullyResolvedNetwork/>
                </div>
                <!-- FIXME: Insert the list of generated rules. -->
            </div>
        </Body>
    </Pane>

    <Pane Title='Query Result'>
        <Body>
            @if (Engine != null)
            {
                <QueryEngineDisplay @ref=QEDisplay Engine=@Engine/>
            }
            else
            {
                <p class='no-engine-message'>Query the model to continue.</p>
            }
        </Body>
    </Pane>
</PaneStack>

@code {
    public string AppliedPiSource { get; set; } = "";

    public string? ErrorMessage { get; set; }

    public Network? ParsedNetwork { get; set; }

    public ResolvedNetwork? FullyResolvedNetwork { get; set; }

    private void Parse()
    {
        try
        {
            ErrorMessage = null;
            ParsedNetwork = null;
            FullyResolvedNetwork = null;
            ParsedNetwork = Network.CreateFromCode(AppliedPiSource);
            FullyResolvedNetwork = ResolvedNetwork.From(ParsedNetwork);
        }
        catch (NetworkCreationException ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private QueryEngine? Engine = null;

    private QueryEngineDisplay? QEDisplay { get; set; }

    private void Query()
    {
        // FIXME: Write me.
    }
}
