@page "/"

@* 
 * The page dedicated to directly editing and processing Stateful Horn clauses.
 * Note that this page will require heavy refactoring to remove redundant code,
 * as a lot of this work is experimental.
 *@

@using System.IO
@using System.Text
@using StatefulHorn
@using SarsaWidgets

@inject IJSRuntime JS

<PageTitle>Stateful Horn Clause Authoring</PageTitle>

<PaneStack>
    <Pane Title="Stateful Horn Editor">
        <ButtonBarItems>
            <button class='parse-button' @onclick=Parse>Parse</button>
        </ButtonBarItems>
        <Body>
            <div class='outer-pane'>
                <div class='pane-button-bar'>
                    <button class='load-source-file'>
                        <InputFile OnChange=@LoadSourceFile/>
                        <div class='load-source-file-inner'>📂 Load Source File</div>
                    </button>
                    <div class='grower'></div>
                    <button @onclick=LoadBasicExample>Load Basic Example</button>
                    <button @onclick=LoadPaperExample1>Load Paper Example 1</button>
                    <button @onclick=LoadPaperExample2>Load Paper Example 2</button>
                    <div class='grower'></div>
                    <button @onclick=SaveSource>💾 Save Source</button>
                </div>
                <div class='pane-body'>
                    <ClauseEditor @bind-Text=StatefulHornSource/>
                </div>
            </div>
        </Body>
    </Pane>

    <Pane Title='Compilation &amp; Elaboration'>
        <ButtonBarItems>
            <button disabled=@(NotParsed || (Universe != null && Universe.IsExhausted)) @onclick=Elaborate>Elaborate</button>
        </ButtonBarItems>
        <Body>
            <div class='elaboration-pane-inner'>
                <div class='elaboration-column'>
                    <ClauseCompileDisplay Compiler=Compiler/>
                </div>
            </div>
        </Body>
    </Pane>

    <!-- <Pane Title='Nession Inspection &amp; Querying'>
        <Body>
            <div class='outer-pane'>
                <p>To be replaced.</p>
            </div>
        </Body>
    </Pane> -->
</PaneStack>

@code {
    public Index()
    {
        Compiler.OnComplete += (IClauseCompiler cc, QueryEngine? qe, string? _) => Universe = null; // FIXME: Update to use QueryEngine.
    }

    #region Clause source handling.

    public string StatefulHornSource { get; set; } = "";

    public bool NotParsed { get; set; } = true;

    private async void LoadSourceFile(InputFileChangeEventArgs args)
    {
        try
        {
            using StreamReader reader = new(args.File.OpenReadStream());
            StatefulHornSource = await reader.ReadToEndAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            StatefulHornSource = $"// UNABLE TO LOAD SOURCE: {ex}";
        }
    }

    private void Parse() 
    {
        NotParsed = false;
        Compiler.Compile(StatefulHornSource);
        GenerationViewed = 0;
    }

    private void ResetWithCode(string src) 
    {
        StatefulHornSource = src;
        NotParsed = true;
    }

    public void LoadBasicExample() => ResetWithCode(SampleLibrary.Basic);

    public void LoadPaperExample1() => ResetWithCode(SampleLibrary.PaperExample1);

    public void LoadPaperExample2() => ResetWithCode(SampleLibrary.PaperExample2);

    private static readonly string DefaultSourceFilename = "source.txt";

    public async void SaveSource()
    {
        await SaveStringToFile(DefaultSourceFilename, StatefulHornSource);
    }

    #endregion
    #region Basic compilation.

    private ClauseCompiler Compiler = new();

    private Universe? Universe;

    private static readonly string SaveFromStreamJSFunc = "saveFromStream";

    private static readonly string DefaultBasisRulesFilename = "basis-rules.txt";

    private UTF8Encoding Utf8 = new();

    private async Task SaveStringToFile(string filename, string data)
    {
        using MemoryStream memStream = new(Utf8.GetBytes(data));
        using DotNetStreamReference dnStreamRef = new(memStream);
        await JS.InvokeVoidAsync(SaveFromStreamJSFunc, filename, dnStreamRef);
    }

    #endregion
    #region Elaboration.

    private Universe.Status? ElaborationStatus { get; set; }

    private async void Elaborate()
    {
        if (Universe != null) 
        {
            Universe.StatusReporter reporter = new(
                () => 
                {
                    ElaborationStatus = new("Commencing elaboration");
                    StateHasChanged();
                },
                (Universe.Status s) =>
                {
                    ElaborationStatus = s;
                    StateHasChanged();
                },
                () =>
                {
                    ElaborationStatus = null;
                    StateHasChanged();
                }
            );

            await Universe.GenerateNextRuleSet(reporter);
            GenerationViewed = Universe!.ChangeLog.Count - 1;
        }
    }

    private int GenerationViewed { get; set; } = 0;

    #endregion

}
