@page "/horn"

@* 
 * The page dedicated to directly editing and processing Stateful Horn clauses.
 * Note that this page will require heavy refactoring to remove redundant code,
 * as a lot of this work is experimental.
 *@

@using System.IO
@using System.Text
@using StatefulHorn
@using SarsaWidgets
@using Sarsaparilla.Utils;

@inject IJSRuntime JS

<PageTitle>Stateful Horn Clause Authoring</PageTitle>

<PaneStack>
    <Pane Title='Stateful Horn Editor'>
        <ButtonBarItems>
            <button class='parse-button' @onclick=Compile>Compile</button>
        </ButtonBarItems>
        <Body>
            <div class='outer-pane'>
                <div class='pane-button-bar'>
                    <button class='load-source-file'>
                        <InputFile OnChange=@LoadSourceFile/>
                        <div class='load-source-file-inner'>📂 Load Source File</div>
                    </button>
                    <div class='grower'></div>
                    <SampleSelector Library="@SampleLibrary" OnModelSelected="@OverwriteWithSample"/>
                    <div class='grower'></div>
                    <button @onclick=SaveSource>💾 Save Source</button>
                </div>
                <div class='pane-body'>
                    <ClauseEditor @bind-Text=StatefulHornSource/>
                </div>
            </div>
        </Body>
    </Pane>

    <Pane Title='Compilation'>
        <ButtonBarItems>
            <button disabled=@ExecuteOrCancelDisabled @onclick=ExecuteOrCancel>@ExecuteButtonLabel</button>
        </ButtonBarItems>
        <Body>
            <div class='pane-body'>
                <ClauseCompileDisplay Compiler=Compiler/>
            </div>
        </Body>
    </Pane>

    <Pane Title='Query Result'>
        <Body>
            @if (Engine != null)
            {
                <QueryEngineDisplay @ref=QEDisplay Engine=@Engine/>
            }
            else
            {
                <p class='no-engine-message'>Compile the source to continue.</p>
            }
        </Body>
    </Pane>
</PaneStack>

@code {
    public Horn()
    {
        Compiler.OnComplete += (IClauseCompiler cc, QueryEngine? qe, string? _) =>
        {
            Engine = qe;
            StateHasChanged();
        };
    }

    private AppKnowledgeSampleLibrary SampleLibrary = new();

    #region Clause source handling.

    public string StatefulHornSource { get; set; } = "";

    private bool _NotParsed = true;

    public bool NotParsed {
        get => _NotParsed;
        set
        {
            _NotParsed = value;
            ExecuteOrCancelDisabled = value;
        }
    }

    private async void LoadSourceFile(InputFileChangeEventArgs args)
    {
        try
        {
            using StreamReader reader = new(args.File.OpenReadStream());
            StatefulHornSource = await reader.ReadToEndAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            StatefulHornSource = $"// UNABLE TO LOAD SOURCE: {ex}";
        }
    }

    private void Compile() 
    {
        NotParsed = false;
        Compiler.Compile(StatefulHornSource);
    }

    private void ResetWithSource(string src) 
    {
        StatefulHornSource = src;
        NotParsed = true;
    }

    public void OverwriteWithSample(string model)
    {
        ResetWithSource(model);
        StateHasChanged();
    }

    private static readonly string DefaultSourceFilename = "source.txt";

    public async void SaveSource()
    {
        await SaveStringToFile(DefaultSourceFilename, StatefulHornSource);
    }

    #endregion
    #region Basic compilation.

    private ClauseCompiler Compiler = new();

    private QueryEngine? Engine = null;

    private static readonly string SaveFromStreamJSFunc = "saveFromStream";

    private UTF8Encoding Utf8 = new();

    private async Task SaveStringToFile(string filename, string data)
    {
        using MemoryStream memStream = new(Utf8.GetBytes(data));
        using DotNetStreamReference dnStreamRef = new(memStream);
        await JS.InvokeVoidAsync(SaveFromStreamJSFunc, filename, dnStreamRef);
    }

    #endregion
    #region Elaboration.

    private QueryEngineDisplay? _QEDisplay;

    private QueryEngineDisplay? QEDisplay {
        get => _QEDisplay;
        set
        {
            if (_QEDisplay != null)
            {
                _QEDisplay.OnQueryCompleted -= QEDisplayOnQueryCompleted;
            }
            _QEDisplay = value;
            if (_QEDisplay != null)
            {
                _QEDisplay.OnQueryCompleted += QEDisplayOnQueryCompleted;
            }
        }
    }

    private void QEDisplayOnQueryCompleted()
    {
        ExecuteOrCancelDisabled = false;
        StateHasChanged();
    }

    private void ExecuteOrCancel()
    {
        if (QEDisplay == null)
        {
            throw new InvalidOperationException("Should not be able to trigger query without compiled ruleset.");
        }
        if (QEDisplay.Status != QueryEngineDisplay.ExecutionStatus.Executing)
        {
            QEDisplay.ExecuteQuery();
        }
        else
        {
            QEDisplay.CancelQuery();
            ExecuteOrCancelDisabled = true;
        }
    }

    public string ExecuteButtonLabel
    {
        get
        {
            if (Engine == null)
            {
                return "Standby";
            }
            if (QEDisplay != null && QEDisplay.Status == QueryEngineDisplay.ExecutionStatus.Executing)
            {
                return "Cancel Query";
            }
            return "Execute Query";
        }
    }

    private bool ExecuteOrCancelDisabled { get; set; } = true;

    #endregion

}
