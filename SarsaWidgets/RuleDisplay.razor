@*
 * A component dedicated to displaying a single Stateful Horn rule in a visually-pleasing manner.
 *@
@using System.Text
@using System.Net
@using SarsaWidgets.Primitives
@using StatefulHorn

<div class='outer'>
    @if (Rule != null)
    {
        <div class='label-sep' title=@OriginDescription>
            @if (ShowLabel)
            {
                <div class='rule-label'>
                    <div class='rule-label-inner'>
                        @FormatUtils.FormatLabel(Rule.Label)
                    </div>
                </div>
            }
            <div class='inner'>
                @{
                    RuleDescription rd = new(Rule);
                }
                @* Guard *@
                @if (rd.HasGuard)
                {
                    <div class='guard'>
                        [
                            @foreach ((IMessage msg1, IMessage msg2) in rd.GuardStatements) {
                                <span class='linear-element'>@msg1 <span class='op'>~/⤳</span> @msg2</span>
                            }
                        ]
                    </div>
                }
                
                @* Premises *@
                @if (rd.HasPremises)
                {
                    <div class='premise'>
                        @if (rd.HasPremiseMappings) {
                            <span>
                            @foreach ((string label, Event prem) in rd.Premises)
                            {
                                <span class='event'>
                                    <EventDisplay Event=@prem/>
                                    <span class='premise-label'>@label</span>
                                </span>
                            }
                            </span>
                            <span class='op'>:</span>
                            <span class='op'>{</span>
                            <span>
                            @foreach ((string label, List<string> ssMappings) in rd.PremiseSnapshotMapping)
                            {
                                @foreach (string ssLabel in ssMappings)
                                {
                                    <span class='linear-element'>
                                        <span class='premise-label'>@label</span>
                                        <span class='operator'>::</span>
                                        @FormatUtils.FormatLabel(ssLabel)
                                    </span>
                                }
                            }
                            </span>
                            <span class='op'>}</span>
                        }
                        else
                        {
                            @foreach ((string _, Event prem) in rd.Premises)
                            {
                                <span class='event'>
                                    <EventDisplay Event=@prem/>
                                </span>
                            }
                        }
                    </div>
                }
                
                @* States & Snapshots *@
                <LeftStateOperator/>
                @if (rd.HasSnapshots)
                {
                    <div class='snapshots'>
                        <span>
                        @foreach (Snapshot ss in rd.Snapshots)
                        {
                            <span class='linear-element'>
                                <span class='op'>(</span>
                                    <StateDisplay State=@ss.Condition/>,
                                    @FormatUtils.FormatLabel(ss.Label)
                                <span class='op'>)</span>
                            </span>
                        }
                        </span>
                        @if (rd.HasSnapshotOrderings)
                        {
                            <span class='orderings'>
                                <span class='op'>:</span>
                                <span class='op'>{</span>
                                <span>
                                @foreach ((string ss1, Snapshot.Ordering so, string ss2) in rd.OrderingStatements)
                                {
                                    <span class='linear-element'>
                                        @FormatUtils.FormatLabel(ss1)
                                        <span class='op'>@so.OperatorString()</span>
                                        @FormatUtils.FormatLabel(ss2)
                                    </span>
                                }
                                </span>
                                <span class='op'>}</span>
                            </span>
                        }
                    </div>
                }
                <RightStateOperator/>

                @* Result *@
                <div class='result'>
                    @if (rd.ResultIsEvent)
                    {
                        <EventDisplay Event=@rd.ResultEvent/>
                    }
                    else 
                    {
                        @foreach ((Snapshot after, State cond) in rd.ResultTransformations!.Transformations)
                        {
                            <span class='linear-element'>
                                <span class='op'>&lt;</span>
                                @FormatUtils.FormatLabel(after.Label)
                                <span class='op'>:</span>
                                <StateDisplay State=@cond/>
                                <span class='op'>&gt;</span>
                            </span>
                        }
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <div class='no-rule-message'>No rule has been set.</div>
    }
</div>

@code {

    private string RuleText { get; set; } = "";

    private Rule? _Rule;

    [Parameter]
    public Rule? Rule {
        get => _Rule;
        set
        {
            RuleText = value == null ? "" : value.ToString();
            _Rule = value;
        }
    }

    [Parameter]
    public bool ShowLabel { get; set; } = true;

    public RenderFragment FormatRule(Rule r)
    {
        // The following is a check on how far we can push the custom control creation.
        string rAsStr = r.ToString();
        string[] parts = rAsStr.Split("-[");
        string[] latterParts = parts[1].Split("]->");

        return @<div>@parts[0]<LeftStateOperator/>@latterParts[0]<RightStateOperator/>@latterParts[1]</div>
    ;
    }

    private string OriginDescription
    {
        get
        {
            if (_Rule != null && _Rule.Definition != null)
            {
                return _Rule.Definition.ToString();
            }
            return "";
        }
    }

}
