@*
 * Provides users with a view of a group of connected processes.
 *@

@using AppliedPi
@using AppliedPi.Processes

@if (Processes == null) 
{
    <div class='no-processes-message'>No process to display.</div>
}
else if (Processes.Processes.Count == 0)
{
    <div class='empty-processes-message'>The process group is empty.</div>
}
else 
{
    <div class='outer'>
        @foreach (IProcess process in Processes.Processes)
        {
            <div class='entry'>
                <div class='nest'>
                    @Template(process)
                </div>
            </div>
        }
    </div>
}

@code {
    #region Parameters

    [Parameter]
    public ProcessGroup? Processes { get; set; }

    #endregion
    #region Process templates.

    private RenderFragment Template(IProcess proc)
    {
        return proc switch
        {
            CallProcess cp => CallTemplate(cp),
            IfProcess ip => IfTemplate(ip),
            InChannelProcess icp => InChannelTemplate(icp),
            LetProcess lp => LetTemplate(lp),
            NewProcess np => NewTemplate(np),
            OutChannelProcess ocp => OutChannelTemplate(ocp),
            ParallelCompositionProcess pcp => ParallelCompositionTemplate(pcp),
            ProcessGroup g => ProcessGroupTemplate(g),
            ReplicateProcess rp => ReplicateTemplate(rp),
            _ => throw new NotImplementedException($"Unrecognised process type {proc.GetType()}")
        };
    }

    private RenderFragment CallTemplate(CallProcess cp)
    {
        return
            @<div class='cell-process'>@cp.CallSpecification</div>
        ;
    }

    private RenderFragment IfTemplate(IfProcess ip)
    {
        return
            @<div class='if-process'>
                <div class='if-line'>
                    <span class='op'>if</span>
                    @ip.Comparison
                    <span class='op'>then</span>
                </div>
                
                <div class='inner-nest'>
                    @Template(ip.GuardedProcess)
                </div>
                @if (ip.ElseProcess != null)
                {
                    <div class='op'>else</div>
                    <div class='inner-nest'>
                        @Template(ip.ElseProcess!)
                    </div>
                }
            </div>
        ;
    }

    private RenderFragment InChannelTemplate(InChannelProcess icp)
    {
        return
            @<div class='in-channel-process'>
                @icp.Channel
                <span class='op'>(</span>
                @string.Join(", ", from rp in @icp.ReceivePattern select rp.Item1)
                <span class='op'>)</span>
            </div>
        ;
    }

    private RenderFragment LetTemplate(LetProcess ltp)
    {
        return
            @<div class='let-process'>
                <div class='let-line'>
                    <span class='op'>let</span>
                    @if (ltp.LeftHandSide.Elements.Count > 1)
                    {
                        <span class='op'>(</span>
                    }
                    @foreach (TuplePattern.Element e in ltp.LeftHandSide.Elements)
                    {
                        @if (e.IsMatcher)
                        {
                            <span class='op'>=</span>
                        }
                        <span class='let-term'>@e.Term</span>
                    }
                    @if (ltp.LeftHandSide.Elements.Count > 1)
                    {
                        <span class='op'>)</span>
                    }
                    <span class='op'>=</span>
                    <span>@ltp.RightHandSide</span>
                    <span class='op'>in</span>
                </div>
                
                <div class='inner-nest'>
                    @Template(ltp.GuardedProcess)
                </div>
                @if (ltp.ElseProcess != null)
                {
                    <div class='op'>else</div>
                    <div class='inner-nest'>
                        @Template(ltp.ElseProcess)
                    </div>
                }
            </div>
        ;
    }

    private RenderFragment NewTemplate(NewProcess np)
    {
        return
            @<div class='new-process'>
                <span class='new-op'>ν</span> @np.Variable
            </div>
            ;
    }

    private RenderFragment OutChannelTemplate(OutChannelProcess ocp)
    {
        return
            @<div class='out-channel-process'>
                <span class='output-channel'>@ocp.Channel</span>
                <span class='op'>&lt;</span>
                @ocp.SentTerm
                <span class='op'>&gt;</span>
            </div>
            ;
    }

    private RenderFragment ParallelCompositionTemplate(ParallelCompositionProcess pcp)
    {
        return
            @<div class='parallel-process'>
                @foreach (IProcess ip in pcp.Processes)
                {
                    <div class='parallel-process-inner'>
                        <div class='nest'>
                            @Template(ip)
                        </div>
                    </div>
                }
        </div>
    ;
    }

    private RenderFragment ProcessGroupTemplate(ProcessGroup g)
    {
        return @<ProcessGroupDisplay Processes=g/>;
    }

    private RenderFragment ReplicateTemplate(ReplicateProcess rp)
    {
        return
            @<div class='replicate'>
                <div class='repl-op'>!</div>
                <div class='nest'>
                    @Template(rp.Process)
                </div>
            </div>
        ;
    }

    #endregion
}
