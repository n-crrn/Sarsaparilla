@*
* A component dedicated to displaying a nonce session.
*@
@using SarsaWidgets.Primitives
@using StatefulHorn
@using StatefulHorn.Query

<div class='outer'> 
    @if (Nession != null)
    {
        @for (int i = 0; i < Nession.History.Count; i++)
        {
            Nession.Frame frame = Nession.History[i];
            <div class='frame-container'>
                <div class='frame-header'>Frame @i</div>
                <div class='state-container'>
                    @for (int j = 0; j < frame.Cells.Count; j++)
                    {
                        Nession.StateCell sc = frame.Cells[j];
                        string stateClass = i > 0 && !Nession.History[i - 1].Cells[j].Condition.Equals(sc.Condition) ? "state diff" : "state";
                        <div class='@stateClass'>
                            @if (sc.TransferRule != null && sc.TransferRule.Premises.Count > 0)
                            {
                                <div class='state-upper'>
                                    <div class='state-premise'>
                                        @foreach (Event p in sc.TransferRule.Premises)
                                        {
                                            <span class='event-element'><EventDisplay Event=@p/></span>
                                        }
                                    </div>
                                </div>
                            }
                            
                            <div class='state-lower'>
                                <div class='state-inner'>
                                    <span class='state-name'>@sc.Condition.Name</span>
                                    <span class='op'>(</span>
                                    <span class='format-values'>@sc.Condition.Value.ToString()</span>
                                    <span class='op'>)</span>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                @if (frame.Rules.Count > 0)
                {
                    <div class='rules-container'>
                        @foreach (StateConsistentRule scr in frame.Rules)
                        {
                            <div class='rules-item'>
                                <RightArrowOperation>
                                        <Left>
                                            @foreach (Event premise in scr.Premises)
                                            {
                                                <EventDisplay Event=@premise/>
                                            }
                                        </Left>
                                        <Right>
                                            <EventDisplay Event=@scr.Result/>
                                        </Right>
                                    </RightArrowOperation>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class='rule-container'>
                        <p class='no-rules-message'>
                            There are no rules to display.
                        </p>
                    </div>
                }
            </div>
        }
    }
    else
    {
        <p class='no-nession-message'>No nession set for display.</p>
    }
</div>

@code {

    [Parameter]
    public Nession? Nession { get; set; }

}
