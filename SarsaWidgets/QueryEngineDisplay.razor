@*
 * A component dedicated to displaying how an attack was found.
 *@
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using StatefulHorn
@using StatefulHorn.Query

<div class='outer'>
    @if (Engine != null)
    {
        <div class='summary-bar'>@Summary</div>

        @if (FoundGlobalAttack != null)
        {
            <div class='main-view'>
                <AttackDisplay Attack=@FoundGlobalAttack/>
            </div>
        }
        else
        {
            <div class='main-view'>
                @if (AssessedNessions.Count > 0)
                {
                    <div class='nession-listing'>
                        <div class='nession-listing-inner'>
                            @if (AssessedNessions.Count > 0)
                            {
                                <Virtualize Items=@AssessedNessions Context=an>
                                    <div class=@NessionListingItemClass(an.Item1) @onclick=@(() => OnSelect(an))>
                                        @if (an.Item3 != null)
                                        {
                                            <div class='nession-attack-icon'>⚠</div>
                                        }
                                        else
                                        {
                                            <div class='nession-no-attack-icon'>✔</div>
                                        }
                                        <div class='nession-label'>@an.Item1.Label</div>
                                    </div>
                                </Virtualize>
                            }
                        </div>
                    </div>
                }

                <div class='nession-attack-view'>
                    <div class='nession-attack-view-inner'>
                        @if (CurrentNession != null)
                        {
                            <div class='upper'>
                                @if (CurrentAttack != null)
                                {
                                    <p class='attack-intro'>Attack details as follows:</p>
                                    <AttackDisplay Attack=@CurrentAttack Expanded=true/>
                                }
                                else
                                {
                                    <p class='nothing-message'>No attack found for this nession.</p>
                                }
                            </div>
                            <div class='lower'>
                                <div class='nession-view'>
                                    <NessionDisplay Nession=@CurrentNession/>
                                </div>

                                @if (CurrentHornClauses != null)
                                {
                                    <div class='horn-clause-view'>
                                        <p class='description'>
                                            Derived horn clauses as follows:
                                        </p>
                                        @foreach ((int rank, List<HornClause> clauseList) in HornClausesByRank)
                                        {
                                            @if (rank == -1)
                                            {
                                                <p>Always Applicable</p>
                                            }
                                            else
                                            {
                                                <p>Rank @rank</p>
                                            }
                                            <div class='clause-collection'>
                                                @foreach (HornClause hc in clauseList)
                                                {
                                                    <div class='horn-clause-item'>
                                                        <HornClauseDisplay HornClause=@hc/>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>    
                                }
                            </div>
                        }
                        else
                        {
                            @if (Status == ExecutionStatus.PreExecution)
                            {
                                <p class='nothing-message'>Please execute query - results will be displayed here.</p>
                            }
                            else if (Status == ExecutionStatus.Executing)
                            {
                                <p class='wait-message'>Please wait while the query executes.</p>
                            }
                            else
                            {
                                <p class='nothing-message'>Please select a nession to continue.</p>
                            }
                        }
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p class='no-engine-message'>Query details are not set for display.</p>
    }
</div>

@code {
    private QueryEngine? _Engine;

    [Parameter]
    public QueryEngine? Engine
    {
        get => _Engine;
        set
        {
            _Engine = value;
        }
    }

    public string Summary
    {
        get
        {
            if (Status == ExecutionStatus.PreExecution)
            {
                if (_Engine == null)
                {
                    return "Query details not set.";
                }
                else
                {
                    return "Query not yet executed.";
                }
            }
            else if (Status == ExecutionStatus.Executing)
            {
                return "Executing query…";
            }
            else
            {
                if (FoundGlobalAttack != null)
                {
                    return "Global attack found (finished, no nessions generated).";
                }
                else if (FoundAttackCount > 0)
                {
                    return $"Finished, {FoundAttackCount} attacks found out of {AssessedNessions.Count} nessions assessed.";
                }
                else
                {
                    return $"Finished, no attacks found with {AssessedNessions.Count} nessions assessed.";
                }
            }
        }
    }

    public async void ExecuteQuery()
    {
        if (Engine != null)
        {
            FoundAttackCount = 0;
            AssessedNessions.Clear();
            FoundGlobalAttack = null;
            CurrentNession = null;
            CurrentAttack = null;
            CurrentHornClauses = null;
            Status = ExecutionStatus.Executing;
            StateHasChanged();
            await Task.Delay(1);

            await Engine.Execute(OnStartNextLevel, OnAttackAssessed, OnQueryCompletion);
        }
    }

    public void CancelQuery()
    {
        Engine?.CancelExecution();
    }

    #region QueryEngine callbacks

    public enum ExecutionStatus
    {
        PreExecution,
        Executing,
        PostExecution
    }

    public ExecutionStatus Status { get; private set; } = ExecutionStatus.PreExecution;

    private Attack? FoundGlobalAttack { get; set; }

    private int FoundAttackCount = 0;

    private void OnStartNextLevel()
    {
        FoundAttackCount = 0;
        Unselect();
        AssessedNessions.Clear();
    }

    private void OnGlobalAttackFound(Attack a)
    {
        FoundGlobalAttack = a;
        // No need to force refresh, as the query is about to end.
    }

    private List<(Nession, IReadOnlySet<HornClause>, Attack?)> AssessedNessions { get; set; } = new();

    private void OnAttackAssessed(Nession n, IReadOnlySet<HornClause> clauses, Attack? a)
    {
        int nessionId = AssessedNessions.Count + 1;
        n.Label = $"Nession {nessionId}";
        if (a != null)
        {
            AssessedNessions.Insert(FoundAttackCount, (n, clauses, a));
            FoundAttackCount++;
        }
        else
        {
            AssessedNessions.Add((n, clauses, a));
        }
        if (AssessedNessions.Count == 1)
        {
            OnSelect(AssessedNessions.First());
        }
        StateHasChanged();
    }

    public event Action? OnQueryCompleted;

    private void OnQueryCompletion()
    {
        Status = ExecutionStatus.PostExecution;
        OnQueryCompleted?.Invoke();
        StateHasChanged();
    }

    #endregion
    #region User interaction.

    public Nession? CurrentNession { get; set; }

    public Attack? CurrentAttack { get; set; }

    private IReadOnlySet<HornClause>? _CurrentHornClauses = null;

    public IReadOnlySet<HornClause>? CurrentHornClauses
    {
        get => _CurrentHornClauses;
        set
        {
            _HornClausesByRank = null;
            _CurrentHornClauses = value;
        }
    }

    private SortedList<int, List<HornClause>>? _HornClausesByRank = null;

    public SortedList<int, List<HornClause>> HornClausesByRank
    {
        get
        {
            if (_HornClausesByRank != null)
            {
                return _HornClausesByRank;
            }
            _HornClausesByRank = new();
            if (_CurrentHornClauses != null)
            {
                foreach (HornClause hc in _CurrentHornClauses)
                {
                    if (!_HornClausesByRank.TryGetValue(hc.Rank, out List<HornClause>? bucket))
                    {
                        bucket = new();
                        _HornClausesByRank[hc.Rank] = bucket;
                    }
                    bucket.Add(hc);
                }
            }
            return _HornClausesByRank;
        }
    }

    private void OnSelect((Nession, IReadOnlySet<HornClause>, Attack?) selTuple)
    {
        CurrentNession = selTuple.Item1;
        CurrentHornClauses = selTuple.Item2;
        CurrentAttack = selTuple.Item3;
    }

    private void Unselect()
    {
        CurrentNession = null;
        CurrentHornClauses = null;
        CurrentAttack = null;
    }

    private bool NessionSelected(Nession n) => CurrentNession != null && n.Label == CurrentNession.Label;

    private string NessionListingItemClass(Nession n) => NessionSelected(n) ? "selected-nession-listing-item" : "nession-listing-item";

    #endregion

}
