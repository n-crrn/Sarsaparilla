@page "/applied-pi"

@*
 * Demonstration of the SarsaWidgets used for the Applied Pi related matters.
 *@

@using AppliedPi
@using SarsaWidgets

<section>
    <h2>Applied Pi Editor</h2>
    <p>Blank:</p>
    <AppliedPiEditor/>
    <p>Preset text:</p>
    <AppliedPiEditor Text=@PiTestSource/>
</section>

<section>
    <h2>Network Display</h2>
    <NetworkDisplay Network=@TestNetwork/>
</section>

@code {
    private static readonly string PiTestSource =
        "free A, B, C: channel.\n" +
        "free D: kitten [private].\n" +
        "type kitten.\n" +
        "type (* Random comment *) dog.\n" +
        "type host.\n" +
        "event beginB(host, host).\n" +
        "event endB(host, host).\n" +
        "(* Another surprise comment. *)\n" +
        "fun pk(skey): pkey.\n" +
        "fun sencrypt(bitstring,nonce): bitstring.\n" +
        "reduc forall x: bitstring, y: skey; decrypt(encrypt(x, y),y) = x.\n" +
        "table keys(host, pkey).\n" +
        "query x: host, y: host; inj-event(endB(x)) ==> inj-event(startB(x)).\n" +
        "const c1: tag [data].\n" +
        "\n" +
        "let procA(hostA: host) = out(c, D).\n" +
        "\n" +
        "process\n" +
        "    let h = if X = A then A else C in\n" +
        "    if h <> A && h <> B then\n" +
        "        insert some_keys(h, key);" +
        "    else insert some_keys(h, other_key).";

    private readonly Network TestNetwork = Network.CreateFromCode(PiTestSource);
}
